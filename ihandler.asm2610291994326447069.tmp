.equ LEDS0, 0x2000 
.equ LEDS1, 0x2004
.equ LEDS2, 0x2008
.equ PULSEWIDTH, 0x200C
.equ TIMER, 0x2020 ; timer address
.equ STATUS, 0x2030 ;Buttons status
.equ EDGE_CONTROL, 0x2034
.equ PERIOD, 1000 ;Period for counter
;IDK HOW TO READ THE IRQ....s
start:
    br main ; jump to the main function
interrupt_handler: 
	addi sp, sp, -16 ; save the registers to the stack
	stw sp, 0(a1)
	stw sp, 4(a2)
	stw sp, 8(a3)
	stw sp, 12(ra)
	rdctl a1, ctl4	; read the ipending register to identify the source
	andi a2, a1, 1
	srli a3, a1, 2 ;Checking if the 3rd bit is on
 	andi a3, a3, 1
	addi a1, zero, 1 
	beq a2, a1, secondCounter
	beq a3, a1, firstCounter 	; call the corresponding routine
   continue: 

	ldw a1, 0(sp); restore the registers from the stack
	ldw a2, 4(sp)
	ldw a3, 8(sp)
	ldw ra, 12(sp)
	addi sp, sp, 16
    addi ea, ea, -4 ; correct the exception return address
    eret ; return from exception
	
main:  ; main procedure here
	addi sp, zero, 0x1F00
	addi t0, zero, 4
	addi t1, zero, PERIOD
	addi t0, zero, 1
	wrctl ctl0, t0 ;allowing interupts to work on our system
	wrctl ctl4, t0 ;This doesn't do anything
checker: 
	ldw t0, TIMER + 12 (zero)
	beq t2, t1, enable ;Checking the 1000 for the loop
loop:
    ldw t2, LEDS2(zero)
	addi t2, t2, 1
    stw t2, LEDS2(zero)
    jmpi checker
enable:
	addi t0, zero, 1
	wrctl ctl3, t0
	jmpi loop

firstCounter : 
	rdctl a0, ctl3
	addi a1, zero , 1	
	sub a1, zero, a1
	and a0, a0, a1 ;Reseting the bits in the ienable back to 0
	wrctl ctl4, a0
	ldw a0, STATUS(zero) ;Getting the buttons which are turned on
	andi a1, a0, 15
	ldw a3, LEDS0(zero)
	addi a2, zero, 14
	beq a1,a2, btnOne
	addi a2, zero, 13
	beq a1,a2, btnTwo
	addi a2, zero, 11
	beq a1,a2, btnThree
	addi a2, zero, 7
	beq a1,a2, btnFour
end:
	stw a3, LEDS0(zero)	
	stw zero, EDGE_CONTROL(zero)
	jmpi continue
btnOne: 
    addi a3,a3,-1
    jmpi end
btnTwo:
    addi a3,a3,1
    jmpi end
btnThree:
    addi a3,a3,-3
    jmpi end
btnFour:
    addi a3,a3,3
    jmpi end
secondCounter: 
	rdctl a0, ctl3
	addi a1, zero , 5 ;Used to create the correct value as int isn't accepted	
	sub a1, zero, a1 ;Resetting the ienable bit to 0
	wrctl ctl3, a0
    ldw a2, LEDS1(zero)
    addi a2,a2,1
    stw a2, LEDS1(zero)
    jmpi continue

